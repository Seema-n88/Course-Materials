private static Processor BillingProcessor;

    static {
        BillingProcessor = new Processor() {
            @Override
            public void process(Exchange exchange) throws Exception {
                TransformedOrder order = (TransformedOrder) exchange.getIn().getBody();
                exchange.getIn().setHeader("OrderId", order.getOrderID());
                exchange.getIn().setBody(order);
            }
        };
    }
    public static void main(String[] args) throws Exception{
        DefaultCamelContext ctxt = new DefaultCamelContext();
        ActiveMQComponent activeMQComponent = ActiveMQComponent.activeMQComponent();
        activeMQComponent.setTrustAllPackages(true);
        ctxt.addComponent("activemq", activeMQComponent);

        RouteBuilder route = new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from("activemq:queue:billing")
                        .to("activemq:queue:aggregatorQueue");
                 }
        };

        ctxt.addRoutes(route);

        ctxt.start();
        System.in.read();
        ctxt.stop();
    }